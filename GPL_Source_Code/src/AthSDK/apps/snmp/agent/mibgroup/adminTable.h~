/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.4 2005/04/26 22:13:28 rstory Exp $
 *
 * $Id: adminTable.h~,v 1.1.1.1 2007/08/30 10:28:09 roy Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef ADMINTABLE_H
#define ADMINTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index adminIndex is internal */

typedef struct adminTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** INTEGER = ASN_INTEGER */
            long adminIndex;

        /** OCTETSTR = ASN_OCTET_STR */
            unsigned char adminName[65535];
            long adminName_len;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} adminTable_context;

/*************************************************************
 * function declarations
 */
void init_adminTable(void);
void initialize_table_adminTable(void);
const adminTable_context * adminTable_get_by_idx(netsnmp_index *);
const adminTable_context * adminTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int adminTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid adminTable_oid[];
extern size_t adminTable_oid_len;

#define adminTable_TABLE_OID 1,3,6,1,4,1,171,1,5,4,1
    
/*************************************************************
 * column number definitions for table adminTable
 */
#define COLUMN_ADMININDEX 1
#define COLUMN_ADMINNAME 2
#define adminTable_COL_MIN 1
#define adminTable_COL_MAX 2

/* comment out the following line if you don't handle SET-REQUEST for adminTable */
#define adminTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define adminTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define adminTable_IDX2

#ifdef adminTable_SET_HANDLING

int adminTable_extract_index( adminTable_context * ctx, netsnmp_index * hdr );

void adminTable_set_reserve1( netsnmp_request_group * );
void adminTable_set_reserve2( netsnmp_request_group * );
void adminTable_set_action( netsnmp_request_group * );
void adminTable_set_commit( netsnmp_request_group * );
void adminTable_set_free( netsnmp_request_group * );
void adminTable_set_undo( netsnmp_request_group * );

adminTable_context * adminTable_duplicate_row( adminTable_context* );
netsnmp_index * adminTable_delete_row( adminTable_context* );

int adminTable_can_delete(adminTable_context *undo_ctx,
                    adminTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef adminTable_ROW_CREATION
adminTable_context * adminTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef adminTable_IDX2
adminTable_context * adminTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
}
#endif

#endif /** ADMINTABLE_H */
