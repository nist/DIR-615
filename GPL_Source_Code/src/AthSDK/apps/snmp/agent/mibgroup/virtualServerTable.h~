/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.4 2005/04/26 22:13:28 rstory Exp $
 *
 * $Id: virtualServerTable.h~,v 1.1.1.1 2007/08/30 10:28:09 roy Exp $
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef VIRTUALSERVERTABLE_H
#define VIRTUALSERVERTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index virtualServerIndex is internal */

typedef struct virtualServerTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** INTEGER = ASN_INTEGER */
            long virtualServerIndex;

        /** OCTETSTR = ASN_OCTET_STR */
            unsigned char virtualServerList[65535];
            long virtualServerList_len;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} virtualServerTable_context;

/*************************************************************
 * function declarations
 */
void init_virtualServerTable(void);
void initialize_table_virtualServerTable(void);
const virtualServerTable_context * virtualServerTable_get_by_idx(netsnmp_index *);
const virtualServerTable_context * virtualServerTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int virtualServerTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid virtualServerTable_oid[];
extern size_t virtualServerTable_oid_len;

#define virtualServerTable_TABLE_OID 1,3,6,1,4,1,171,1,5,8,1
    
/*************************************************************
 * column number definitions for table virtualServerTable
 */
#define COLUMN_VIRTUALSERVERINDEX 1
#define COLUMN_VIRTUALSERVERLIST 2
#define virtualServerTable_COL_MIN 1
#define virtualServerTable_COL_MAX 2

/* comment out the following line if you don't handle SET-REQUEST for virtualServerTable */
#define virtualServerTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define virtualServerTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define virtualServerTable_IDX2

#ifdef virtualServerTable_SET_HANDLING

int virtualServerTable_extract_index( virtualServerTable_context * ctx, netsnmp_index * hdr );

void virtualServerTable_set_reserve1( netsnmp_request_group * );
void virtualServerTable_set_reserve2( netsnmp_request_group * );
void virtualServerTable_set_action( netsnmp_request_group * );
void virtualServerTable_set_commit( netsnmp_request_group * );
void virtualServerTable_set_free( netsnmp_request_group * );
void virtualServerTable_set_undo( netsnmp_request_group * );

virtualServerTable_context * virtualServerTable_duplicate_row( virtualServerTable_context* );
netsnmp_index * virtualServerTable_delete_row( virtualServerTable_context* );

int virtualServerTable_can_delete(virtualServerTable_context *undo_ctx,
                    virtualServerTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef virtualServerTable_ROW_CREATION
virtualServerTable_context * virtualServerTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef virtualServerTable_IDX2
virtualServerTable_context * virtualServerTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
}
#endif

#endif /** VIRTUALSERVERTABLE_H */
