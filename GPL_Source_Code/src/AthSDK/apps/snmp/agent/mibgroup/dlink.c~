/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.int_watch.conf,v 1.2 2002/07/17 14:41:53 dts12 Exp $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "dlink.h"

/* the variable we want to tie an OID to.  The agent will handle all
 * GET and SET requests to this variable changing its value as needed.
 */

static int      dlkWirelessWEPKeySize = 0;  /* XXX: set default value */
static int      enterpriseMulticastStreams = 0;  /* XXX: set default value */
static int      enterprisePPTPPassThrough = 0;  /* XXX: set default value */
static int      dlkEnterpriseWANCloneMac = 0;  /* XXX: set default value */
static int      dlkWirelessWEPKeyType = 0;  /* XXX: set default value */
static int      dlkEnterpriseDHCPService = 0;  /* XXX: set default value */
static int      enterpriseUPNP = 0;  /* XXX: set default value */
static int      enterpriseFragmentLength = 0;  /* XXX: set default value */
static int      dlkEnterpriseDHCPDNSRelay = 0;  /* XXX: set default value */
static int      enterpriseWANPingRespond = 0;  /* XXX: set default value */
static int      enterpriseStartWeek = 0;  /* XXX: set default value */
static int      EnterpriseNTPDaylightSaving = 0;  /* XXX: set default value */
static int      dlkEnterpriseWANMode = 0;  /* XXX: set default value */
static int      dlkEnterpriseLANDNSRelay = 0;  /* XXX: set default value */
static int      enterpriseEndMonth = 0;  /* XXX: set default value */
static int      enterpriseDDNS = 0;  /* XXX: set default value */
static int      enterpriseL2TPPassThrough = 0;  /* XXX: set default value */
static int      enterpriseTransmitPower = 0;  /* XXX: set default value */
static int      dlkEnterpriseWANMTU = 0;  /* XXX: set default value */
static int      enterpriseConsoleSettingsTimeout = 0;  /* XXX: set default value */
static int      dlkWirelessEAPType = 0;  /* XXX: set default value */
static int      enterpriseSystemRestore = 0;  /* XXX: set default value */
static int      enterpriseNTPTimeZone = 0;  /* XXX: set default value */
static int      enterpriseRTSLength = 0;  /* XXX: set default value */
static int      enterpriseLimitAdmin = 0;  /* XXX: set default value */
static int      dlkWirelessWEPValidKey = 0;  /* XXX: set default value */
static int      dlkWirelessAuthType = 0;  /* XXX: set default value */
static int      enterpriseServerAddress = 0;  /* XXX: set default value */
static int      enterpriseEndDayOfWeek = 0;  /* XXX: set default value */
static int      dlkEnterpriseDHCPEndIP = 0;  /* XXX: set default value */
static int      enterpriseStartTime = 0;  /* XXX: set default value */
static int      enterpriseChannel = 0;  /* XXX: set default value */
static int      enterpriseConsoleSettings = 0;  /* XXX: set default value */
static int      dlkEnterpriseDHCPStartIP = 0;  /* XXX: set default value */
static int      enterpriseStartDayOfWeek = 0;  /* XXX: set default value */
static int      enterpriseEndTime = 0;  /* XXX: set default value */
static int      enterpriseEndWeek = 0;  /* XXX: set default value */
static int      enterpriseStartMonth = 0;  /* XXX: set default value */
static int      dlkEnterpriseDHCPLeaseTime = 0;  /* XXX: set default value */
static int      enterpriseIPSECPassThrough = 0;  /* XXX: set default value */
static int      dlkWirelessAuthenticationType = 0;  /* XXX: set default value */
static int      enterpriseBGMode = 0;  /* XXX: set default value */
static int      enterpriseAntennaDiversity = 0;  /* XXX: set default value */
static int      enterpriseSystemReboot = 0;  /* XXX: set default value */
static int      enterpriseDataRate = 0;  /* XXX: set default value */

/*
 * our initialization routine, automatically called by the agent 
 * (to get called, the function name must match init_FILENAME()) 
 */
void
init_dlink(void)
{
    static oid dlkWirelessWEPKeySize_oid[] = { 1,3,6,1,4,1,171,1,2,2,3, 0 };
    static oid enterpriseMulticastStreams_oid[] = { 1,3,6,1,4,1,171,1,5,1,3, 0 };
    static oid enterprisePPTPPassThrough_oid[] = { 1,3,6,1,4,1,171,1,5,3,1, 0 };
    static oid dlkEnterpriseWANCloneMac_oid[] = { 1,3,6,1,4,1,171,1,3,4, 0 };
    static oid dlkWirelessWEPKeyType_oid[] = { 1,3,6,1,4,1,171,1,2,2,2, 0 };
    static oid dlkEnterpriseDHCPService_oid[] = { 1,3,6,1,4,1,171,1,4,2,1, 0 };
    static oid enterpriseUPNP_oid[] = { 1,3,6,1,4,1,171,1,5,1,1, 0 };
    static oid enterpriseFragmentLength_oid[] = { 1,3,6,1,4,1,171,1,2,1,4, 0 };
    static oid dlkEnterpriseDHCPDNSRelay_oid[] = { 1,3,6,1,4,1,171,1,4,2,6, 0 };
    static oid enterpriseWANPingRespond_oid[] = { 1,3,6,1,4,1,171,1,5,1,2, 0 };
    static oid enterpriseStartWeek_oid[] = { 1,3,6,1,4,1,171,1,1,13,4,2, 0 };
    static oid EnterpriseNTPDaylightSaving_oid[] = { 1,3,6,1,4,1,171,1,1,13,3, 0 };
    static oid dlkEnterpriseWANMode_oid[] = { 1,3,6,1,4,1,171,1,3,1, 0 };
    static oid dlkEnterpriseLANDNSRelay_oid[] = { 1,3,6,1,4,1,171,1,4,1,4, 0 };
    static oid enterpriseEndMonth_oid[] = { 1,3,6,1,4,1,171,1,1,13,5,1, 0 };
    static oid enterpriseDDNS_oid[] = { 1,3,6,1,4,1,171,1,5,2,1, 0 };
    static oid enterpriseL2TPPassThrough_oid[] = { 1,3,6,1,4,1,171,1,5,3,2, 0 };
    static oid enterpriseTransmitPower_oid[] = { 1,3,6,1,4,1,171,1,2,1,6, 0 };
    static oid dlkEnterpriseWANMTU_oid[] = { 1,3,6,1,4,1,171,1,3,7, 0 };
    static oid enterpriseConsoleSettingsTimeout_oid[] = { 1,3,6,1,4,1,171,1,1,11, 0 };
    static oid dlkWirelessEAPType_oid[] = { 1,3,6,1,4,1,171,1,2,2,7,1, 0 };
    static oid enterpriseSystemRestore_oid[] = { 1,3,6,1,4,1,171,1,1,12, 0 };
    static oid enterpriseNTPTimeZone_oid[] = { 1,3,6,1,4,1,171,1,1,13,2, 0 };
    static oid enterpriseRTSLength_oid[] = { 1,3,6,1,4,1,171,1,2,1,5, 0 };
    static oid enterpriseLimitAdmin_oid[] = { 1,3,6,1,4,1,171,1,1,7, 0 };
    static oid dlkWirelessWEPValidKey_oid[] = { 1,3,6,1,4,1,171,1,2,2,4, 0 };
    static oid dlkWirelessAuthType_oid[] = { 1,3,6,1,4,1,171,1,2,2,7,2, 0 };
    static oid enterpriseServerAddress_oid[] = { 1,3,6,1,4,1,171,1,5,2,2, 0 };
    static oid enterpriseEndDayOfWeek_oid[] = { 1,3,6,1,4,1,171,1,1,13,5,3, 0 };
    static oid dlkEnterpriseDHCPEndIP_oid[] = { 1,3,6,1,4,1,171,1,4,2,3, 0 };
    static oid enterpriseStartTime_oid[] = { 1,3,6,1,4,1,171,1,1,13,4,4, 0 };
    static oid enterpriseChannel_oid[] = { 1,3,6,1,4,1,171,1,2,1,2, 0 };
    static oid enterpriseConsoleSettings_oid[] = { 1,3,6,1,4,1,171,1,1,10, 0 };
    static oid dlkEnterpriseDHCPStartIP_oid[] = { 1,3,6,1,4,1,171,1,4,2,2, 0 };
    static oid enterpriseStartDayOfWeek_oid[] = { 1,3,6,1,4,1,171,1,1,13,4,3, 0 };
    static oid enterpriseEndTime_oid[] = { 1,3,6,1,4,1,171,1,1,13,5,4, 0 };
    static oid enterpriseEndWeek_oid[] = { 1,3,6,1,4,1,171,1,1,13,5,2, 0 };
    static oid enterpriseStartMonth_oid[] = { 1,3,6,1,4,1,171,1,1,13,4,1, 0 };
    static oid dlkEnterpriseDHCPLeaseTime_oid[] = { 1,3,6,1,4,1,171,1,4,2,4, 0 };
    static oid enterpriseIPSECPassThrough_oid[] = { 1,3,6,1,4,1,171,1,5,3,3, 0 };
    static oid dlkWirelessAuthenticationType_oid[] = { 1,3,6,1,4,1,171,1,2,2,1, 0 };
    static oid enterpriseBGMode_oid[] = { 1,3,6,1,4,1,171,1,2,1,7, 0 };
    static oid enterpriseAntennaDiversity_oid[] = { 1,3,6,1,4,1,171,1,2,1,8, 0 };
    static oid enterpriseSystemReboot_oid[] = { 1,3,6,1,4,1,171,1,1,6, 0 };
    static oid enterpriseDataRate_oid[] = { 1,3,6,1,4,1,171,1,2,1,3, 0 };

  /*
   * a debugging statement.  Run the agent with -Ddlink to see
   * the output of this debugging statement. 
   */
  DEBUGMSGTL(("dlink", "Initializing the dlink module\n"));


    /*
     * the line below registers our variables defined above as
     * accessible and makes them writable.  A read only version of any
     * of these registrations would merely call
     * register_read_only_int_instance() instead.  The functions
     * called below should be consistent with your MIB, however.
     * 
     * If you wanted a callback when the value was retrieved or set
     * (even though the details of doing this are handled for you),
     * you could change the NULL pointer below to a valid handler
     * function. 
     */
    DEBUGMSGTL(("dlink",
                "Initializing dlkWirelessWEPKeySize scalar integer.  Default value = %d\n",
                dlkWirelessWEPKeySize));
      netsnmp_register_int_instance("dlkWirelessWEPKeySize",
                                    dlkWirelessWEPKeySize_oid,
                                    OID_LENGTH(dlkWirelessWEPKeySize_oid),
                                    &dlkWirelessWEPKeySize, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseMulticastStreams scalar integer.  Default value = %d\n",
                enterpriseMulticastStreams));
      netsnmp_register_int_instance("enterpriseMulticastStreams",
                                    enterpriseMulticastStreams_oid,
                                    OID_LENGTH(enterpriseMulticastStreams_oid),
                                    &enterpriseMulticastStreams, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterprisePPTPPassThrough scalar integer.  Default value = %d\n",
                enterprisePPTPPassThrough));
      netsnmp_register_int_instance("enterprisePPTPPassThrough",
                                    enterprisePPTPPassThrough_oid,
                                    OID_LENGTH(enterprisePPTPPassThrough_oid),
                                    &enterprisePPTPPassThrough, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseWANCloneMac scalar integer.  Default value = %d\n",
                dlkEnterpriseWANCloneMac));
      netsnmp_register_int_instance("dlkEnterpriseWANCloneMac",
                                    dlkEnterpriseWANCloneMac_oid,
                                    OID_LENGTH(dlkEnterpriseWANCloneMac_oid),
                                    &dlkEnterpriseWANCloneMac, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkWirelessWEPKeyType scalar integer.  Default value = %d\n",
                dlkWirelessWEPKeyType));
      netsnmp_register_int_instance("dlkWirelessWEPKeyType",
                                    dlkWirelessWEPKeyType_oid,
                                    OID_LENGTH(dlkWirelessWEPKeyType_oid),
                                    &dlkWirelessWEPKeyType, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseDHCPService scalar integer.  Default value = %d\n",
                dlkEnterpriseDHCPService));
      netsnmp_register_int_instance("dlkEnterpriseDHCPService",
                                    dlkEnterpriseDHCPService_oid,
                                    OID_LENGTH(dlkEnterpriseDHCPService_oid),
                                    &dlkEnterpriseDHCPService, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseUPNP scalar integer.  Default value = %d\n",
                enterpriseUPNP));
      netsnmp_register_int_instance("enterpriseUPNP",
                                    enterpriseUPNP_oid,
                                    OID_LENGTH(enterpriseUPNP_oid),
                                    &enterpriseUPNP, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseFragmentLength scalar integer.  Default value = %d\n",
                enterpriseFragmentLength));
      netsnmp_register_int_instance("enterpriseFragmentLength",
                                    enterpriseFragmentLength_oid,
                                    OID_LENGTH(enterpriseFragmentLength_oid),
                                    &enterpriseFragmentLength, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseDHCPDNSRelay scalar integer.  Default value = %d\n",
                dlkEnterpriseDHCPDNSRelay));
      netsnmp_register_int_instance("dlkEnterpriseDHCPDNSRelay",
                                    dlkEnterpriseDHCPDNSRelay_oid,
                                    OID_LENGTH(dlkEnterpriseDHCPDNSRelay_oid),
                                    &dlkEnterpriseDHCPDNSRelay, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseWANPingRespond scalar integer.  Default value = %d\n",
                enterpriseWANPingRespond));
      netsnmp_register_int_instance("enterpriseWANPingRespond",
                                    enterpriseWANPingRespond_oid,
                                    OID_LENGTH(enterpriseWANPingRespond_oid),
                                    &enterpriseWANPingRespond, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseStartWeek scalar integer.  Default value = %d\n",
                enterpriseStartWeek));
      netsnmp_register_int_instance("enterpriseStartWeek",
                                    enterpriseStartWeek_oid,
                                    OID_LENGTH(enterpriseStartWeek_oid),
                                    &enterpriseStartWeek, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing EnterpriseNTPDaylightSaving scalar integer.  Default value = %d\n",
                EnterpriseNTPDaylightSaving));
      netsnmp_register_int_instance("EnterpriseNTPDaylightSaving",
                                    EnterpriseNTPDaylightSaving_oid,
                                    OID_LENGTH(EnterpriseNTPDaylightSaving_oid),
                                    &EnterpriseNTPDaylightSaving, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseWANMode scalar integer.  Default value = %d\n",
                dlkEnterpriseWANMode));
      netsnmp_register_int_instance("dlkEnterpriseWANMode",
                                    dlkEnterpriseWANMode_oid,
                                    OID_LENGTH(dlkEnterpriseWANMode_oid),
                                    &dlkEnterpriseWANMode, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseLANDNSRelay scalar integer.  Default value = %d\n",
                dlkEnterpriseLANDNSRelay));
      netsnmp_register_int_instance("dlkEnterpriseLANDNSRelay",
                                    dlkEnterpriseLANDNSRelay_oid,
                                    OID_LENGTH(dlkEnterpriseLANDNSRelay_oid),
                                    &dlkEnterpriseLANDNSRelay, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseEndMonth scalar integer.  Default value = %d\n",
                enterpriseEndMonth));
      netsnmp_register_int_instance("enterpriseEndMonth",
                                    enterpriseEndMonth_oid,
                                    OID_LENGTH(enterpriseEndMonth_oid),
                                    &enterpriseEndMonth, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseDDNS scalar integer.  Default value = %d\n",
                enterpriseDDNS));
      netsnmp_register_int_instance("enterpriseDDNS",
                                    enterpriseDDNS_oid,
                                    OID_LENGTH(enterpriseDDNS_oid),
                                    &enterpriseDDNS, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseL2TPPassThrough scalar integer.  Default value = %d\n",
                enterpriseL2TPPassThrough));
      netsnmp_register_int_instance("enterpriseL2TPPassThrough",
                                    enterpriseL2TPPassThrough_oid,
                                    OID_LENGTH(enterpriseL2TPPassThrough_oid),
                                    &enterpriseL2TPPassThrough, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseTransmitPower scalar integer.  Default value = %d\n",
                enterpriseTransmitPower));
      netsnmp_register_int_instance("enterpriseTransmitPower",
                                    enterpriseTransmitPower_oid,
                                    OID_LENGTH(enterpriseTransmitPower_oid),
                                    &enterpriseTransmitPower, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseWANMTU scalar integer.  Default value = %d\n",
                dlkEnterpriseWANMTU));
      netsnmp_register_int_instance("dlkEnterpriseWANMTU",
                                    dlkEnterpriseWANMTU_oid,
                                    OID_LENGTH(dlkEnterpriseWANMTU_oid),
                                    &dlkEnterpriseWANMTU, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseConsoleSettingsTimeout scalar integer.  Default value = %d\n",
                enterpriseConsoleSettingsTimeout));
      netsnmp_register_int_instance("enterpriseConsoleSettingsTimeout",
                                    enterpriseConsoleSettingsTimeout_oid,
                                    OID_LENGTH(enterpriseConsoleSettingsTimeout_oid),
                                    &enterpriseConsoleSettingsTimeout, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkWirelessEAPType scalar integer.  Default value = %d\n",
                dlkWirelessEAPType));
      netsnmp_register_int_instance("dlkWirelessEAPType",
                                    dlkWirelessEAPType_oid,
                                    OID_LENGTH(dlkWirelessEAPType_oid),
                                    &dlkWirelessEAPType, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseSystemRestore scalar integer.  Default value = %d\n",
                enterpriseSystemRestore));
      netsnmp_register_int_instance("enterpriseSystemRestore",
                                    enterpriseSystemRestore_oid,
                                    OID_LENGTH(enterpriseSystemRestore_oid),
                                    &enterpriseSystemRestore, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseNTPTimeZone scalar integer.  Default value = %d\n",
                enterpriseNTPTimeZone));
      netsnmp_register_int_instance("enterpriseNTPTimeZone",
                                    enterpriseNTPTimeZone_oid,
                                    OID_LENGTH(enterpriseNTPTimeZone_oid),
                                    &enterpriseNTPTimeZone, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseRTSLength scalar integer.  Default value = %d\n",
                enterpriseRTSLength));
      netsnmp_register_int_instance("enterpriseRTSLength",
                                    enterpriseRTSLength_oid,
                                    OID_LENGTH(enterpriseRTSLength_oid),
                                    &enterpriseRTSLength, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseLimitAdmin scalar integer.  Default value = %d\n",
                enterpriseLimitAdmin));
      netsnmp_register_int_instance("enterpriseLimitAdmin",
                                    enterpriseLimitAdmin_oid,
                                    OID_LENGTH(enterpriseLimitAdmin_oid),
                                    &enterpriseLimitAdmin, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkWirelessWEPValidKey scalar integer.  Default value = %d\n",
                dlkWirelessWEPValidKey));
      netsnmp_register_int_instance("dlkWirelessWEPValidKey",
                                    dlkWirelessWEPValidKey_oid,
                                    OID_LENGTH(dlkWirelessWEPValidKey_oid),
                                    &dlkWirelessWEPValidKey, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkWirelessAuthType scalar integer.  Default value = %d\n",
                dlkWirelessAuthType));
      netsnmp_register_int_instance("dlkWirelessAuthType",
                                    dlkWirelessAuthType_oid,
                                    OID_LENGTH(dlkWirelessAuthType_oid),
                                    &dlkWirelessAuthType, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseServerAddress scalar integer.  Default value = %d\n",
                enterpriseServerAddress));
      netsnmp_register_int_instance("enterpriseServerAddress",
                                    enterpriseServerAddress_oid,
                                    OID_LENGTH(enterpriseServerAddress_oid),
                                    &enterpriseServerAddress, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseEndDayOfWeek scalar integer.  Default value = %d\n",
                enterpriseEndDayOfWeek));
      netsnmp_register_int_instance("enterpriseEndDayOfWeek",
                                    enterpriseEndDayOfWeek_oid,
                                    OID_LENGTH(enterpriseEndDayOfWeek_oid),
                                    &enterpriseEndDayOfWeek, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseDHCPEndIP scalar integer.  Default value = %d\n",
                dlkEnterpriseDHCPEndIP));
      netsnmp_register_int_instance("dlkEnterpriseDHCPEndIP",
                                    dlkEnterpriseDHCPEndIP_oid,
                                    OID_LENGTH(dlkEnterpriseDHCPEndIP_oid),
                                    &dlkEnterpriseDHCPEndIP, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseStartTime scalar integer.  Default value = %d\n",
                enterpriseStartTime));
      netsnmp_register_int_instance("enterpriseStartTime",
                                    enterpriseStartTime_oid,
                                    OID_LENGTH(enterpriseStartTime_oid),
                                    &enterpriseStartTime, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseChannel scalar integer.  Default value = %d\n",
                enterpriseChannel));
      netsnmp_register_int_instance("enterpriseChannel",
                                    enterpriseChannel_oid,
                                    OID_LENGTH(enterpriseChannel_oid),
                                    &enterpriseChannel, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseConsoleSettings scalar integer.  Default value = %d\n",
                enterpriseConsoleSettings));
      netsnmp_register_int_instance("enterpriseConsoleSettings",
                                    enterpriseConsoleSettings_oid,
                                    OID_LENGTH(enterpriseConsoleSettings_oid),
                                    &enterpriseConsoleSettings, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseDHCPStartIP scalar integer.  Default value = %d\n",
                dlkEnterpriseDHCPStartIP));
      netsnmp_register_int_instance("dlkEnterpriseDHCPStartIP",
                                    dlkEnterpriseDHCPStartIP_oid,
                                    OID_LENGTH(dlkEnterpriseDHCPStartIP_oid),
                                    &dlkEnterpriseDHCPStartIP, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseStartDayOfWeek scalar integer.  Default value = %d\n",
                enterpriseStartDayOfWeek));
      netsnmp_register_int_instance("enterpriseStartDayOfWeek",
                                    enterpriseStartDayOfWeek_oid,
                                    OID_LENGTH(enterpriseStartDayOfWeek_oid),
                                    &enterpriseStartDayOfWeek, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseEndTime scalar integer.  Default value = %d\n",
                enterpriseEndTime));
      netsnmp_register_int_instance("enterpriseEndTime",
                                    enterpriseEndTime_oid,
                                    OID_LENGTH(enterpriseEndTime_oid),
                                    &enterpriseEndTime, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseEndWeek scalar integer.  Default value = %d\n",
                enterpriseEndWeek));
      netsnmp_register_int_instance("enterpriseEndWeek",
                                    enterpriseEndWeek_oid,
                                    OID_LENGTH(enterpriseEndWeek_oid),
                                    &enterpriseEndWeek, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseStartMonth scalar integer.  Default value = %d\n",
                enterpriseStartMonth));
      netsnmp_register_int_instance("enterpriseStartMonth",
                                    enterpriseStartMonth_oid,
                                    OID_LENGTH(enterpriseStartMonth_oid),
                                    &enterpriseStartMonth, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkEnterpriseDHCPLeaseTime scalar integer.  Default value = %d\n",
                dlkEnterpriseDHCPLeaseTime));
      netsnmp_register_int_instance("dlkEnterpriseDHCPLeaseTime",
                                    dlkEnterpriseDHCPLeaseTime_oid,
                                    OID_LENGTH(dlkEnterpriseDHCPLeaseTime_oid),
                                    &dlkEnterpriseDHCPLeaseTime, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseIPSECPassThrough scalar integer.  Default value = %d\n",
                enterpriseIPSECPassThrough));
      netsnmp_register_int_instance("enterpriseIPSECPassThrough",
                                    enterpriseIPSECPassThrough_oid,
                                    OID_LENGTH(enterpriseIPSECPassThrough_oid),
                                    &enterpriseIPSECPassThrough, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing dlkWirelessAuthenticationType scalar integer.  Default value = %d\n",
                dlkWirelessAuthenticationType));
      netsnmp_register_int_instance("dlkWirelessAuthenticationType",
                                    dlkWirelessAuthenticationType_oid,
                                    OID_LENGTH(dlkWirelessAuthenticationType_oid),
                                    &dlkWirelessAuthenticationType, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseBGMode scalar integer.  Default value = %d\n",
                enterpriseBGMode));
      netsnmp_register_int_instance("enterpriseBGMode",
                                    enterpriseBGMode_oid,
                                    OID_LENGTH(enterpriseBGMode_oid),
                                    &enterpriseBGMode, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseAntennaDiversity scalar integer.  Default value = %d\n",
                enterpriseAntennaDiversity));
      netsnmp_register_int_instance("enterpriseAntennaDiversity",
                                    enterpriseAntennaDiversity_oid,
                                    OID_LENGTH(enterpriseAntennaDiversity_oid),
                                    &enterpriseAntennaDiversity, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseSystemReboot scalar integer.  Default value = %d\n",
                enterpriseSystemReboot));
      netsnmp_register_int_instance("enterpriseSystemReboot",
                                    enterpriseSystemReboot_oid,
                                    OID_LENGTH(enterpriseSystemReboot_oid),
                                    &enterpriseSystemReboot, NULL);
    DEBUGMSGTL(("dlink",
                "Initializing enterpriseDataRate scalar integer.  Default value = %d\n",
                enterpriseDataRate));
      netsnmp_register_int_instance("enterpriseDataRate",
                                    enterpriseDataRate_oid,
                                    OID_LENGTH(enterpriseDataRate_oid),
                                    &enterpriseDataRate, NULL);

  DEBUGMSGTL(("dlink",
              "Done initalizing dlink module\n"));
}
